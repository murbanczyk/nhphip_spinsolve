##############################################################
# This procedure protects the procedures after
# interfaceDescrition from being overwritten when compiling
##############################################################

procedure(status)

endproc("readonly")


##############################################################
# This procedure describes the experiment parameter
# user interface. This is autogenerated from the pulse program
# interface list. Do not modify manually
##############################################################

procedure(status)

endproc("readonly")

procedure(interfaceDescription)

   interface = [
      "nucleus","Nuclei (f2-f1)","tb","readonly_string","",
      "b1Freq1H","1H frequency (MHz)","tb","double","[1,400]",
      "centerFreqPPM","Centre frequency (ppm)","tb","float","",
      "bandwidthf1PPM","Bandwidth in f1 (ppm)","tb","float","",
      "spoilDelay","Spoiler duration (us)","tb","float","[2,327670]",
      "spoilAmp","Spoiler amplitude","tb","float","[-15000,15000]",
      "ShapedAmplitude","ShapedRF amplitude (dB)","tb","float","[-85,0]",
      "tableButAmp","Select Amp. shapedrf file","bt","string","getTableFileAmp",
      "tableFileNameAmp","Amplitude shapedrf file","tb","string","",
      "tableButPh","Select Phase shapedrf file","bt","string","getTableFilePhase",
      "tableFileNamePh","Phase shapedrf file","tb","string","",
      "90Amplitude1H","90 Pulse amplitude (dB)","tb","float","[-85,0]",
      "pulseLength1H","1H 90 Pulse length (us)","tb","float","[0.5,1000]",
      "dd1","d1 delay (ms)","tb","float","",
      "p16","red.grad. fin. echo  [ms]","tb","float","",
      "del16","red.del.grad.fin.[ms]","tb","float","",
      "p19","gradient length [ms]","tb","float","",
      "del19","Delay grad recovery [ms]","tb","float","",
      "shaplength","Lenght of shapedRF [ms]","tb","float","[0.5,1000]",
      "shapepoints","No pts shapedRF","tb","integer","[1,1e8]",
      "cnst1","J(HH)","tb","float","",
      "gradMax","Max. gradient mT/m","tb","float","[0,2000]",
      "gradAmpPC1","Gradient Amp gp1 (%)","tb","float","[-100,100]",
      "gradAmpPC2","Gradient Amp gp2 (%)","tb","float","[-100,100]",
      "gradAmpPC3","Gradient Amp gp3 (%)","tb","float","[-100,100]",
      "gradAmpPC4","Gradient Amp gp4 (%)","tb","float","[-100,100]",
      "gradAmpPC5","Gradient Amp gp5 (%)","tb","float","[-100,100]",
      "cosyType","Type of IR_bubble_2D_ZQCOSY","tm","string","[\"45\",\"90\"]",
      "nrSteps","Number of steps","tb","integer","[1,1e8]",
      "gradStab"," NOTUSED (us)","tb","float","[2,327670]",
      "dummyCycles","Number of dummy cycles","tb","integer","[0,16]",
      "repTime","Repetition time (ms)","tb","float","[1,1e+008]",
      "acquDiv","Acquisition","dv", "Acquisition2d", "",
      "rxGain","Receiver gain","tm","integer","[\"-20\",\"-17\",\"-14\",\"-11\",\"-8\",\"-5\",\"-2\",\"1\",\"4\",\"7\",\"10\",\"13\",\"16\",\"19\",\"22\",\"25\",\"28\",\"31\",\"34\",\"37\",\"40\",\"43\",\"46\",\"49\",\"52\",\"55\",\"58\",\"61\",\"64\",\"67\",\"70\"]",
      "rxChannel","Receiver channel","tm","string","[\"1H\",\"13C\",\"15N\",\"19F\",\"29Si\",\"31P\",\"X\"]",
      "rxPhase","Receiver phase","tb","float","[-360,360]",
      "nrPnts","Number of points","tm","integer","[\"4\",\"8\",\"16\",\"32\",\"64\",\"128\",\"256\",\"512\",\"1024\",\"2048\",\"4096\",\"8192\",\"16384\",\"32768\"]",
      "dwellTime","Dwell time (us)","tm","float","[\"1\",\"2\",\"5\",\"10\",\"20\",\"50\",\"100\",\"200\",\"500\",\"1000\",\"2000\"]",
      "nrScans","Number of scans","tb","float","[1,1e8]",
      "flatFilter","Flat filter","cb","string","no,yes",
      "accumulate","Accumulate data","cb","string","no,yes",
      "usePhaseCycle","Phase cycle","cb","string","no,yes",
      "bandwidth","Bandwidth f2 (kHz)","tb2","float","",
      "acqTime","Acquisition time (ms)","tb","float","",
      "procDiv","Processing","dv", "Processing_Std", "",
      "zf","Zero fill factor?","tm","integer","[\"1\",\"2\",\"4\",\"8\",\"16\"]",
      "filter","Apodisation filter?","cb","string","no,yes",
      "filterType","Filter type","tm","string","[\"none\",\"exp:1\",\"exponential\",\"sinebellsquared\"]",
      "fdPhaseCorr","Freq. domain phasing","tm","string","[\"autophase\",\"mag\",\"none\"]",
      "dispDiv","Display","dv", "Display_Std", "",
      "usePPMScale","Use ppm scale?","cb","string","no,yes",
      "dispRangeMinPPM","Minimum ppm value","tb","float","[-2000,2000]",
      "dispRangeMaxPPM","Maximum ppm value","tb","float","[-2000,2000]",
      "dispRange","Display range (Hz)","tb","float","[0,2e6]",
      "fileDiv","Files","dv", "File_Settings", "",
      "saveData","Save data?","cb","string","false,true"]


endproc(interface)


procedure(plot_run_layout)

   layout = ["pt1","pt2";"im1","im2"]

endproc(layout)

procedure(plot_load_layout)

   layout = ["name=im1, type=fid";"name=im2, type=spectrum"]

endproc(layout)

procedure(processing_controls)

   layout = struct(buttonLabel = "FT",       plotName = "im1", macroToRun = "apodizeNTransform2D(\"im1\",\"im2\")";
                   buttonLabel = "ppm/Hz",   plotName = "im2", macroToRun = "togglePPM_Hz_XY(1)";
                   buttonLabel = "Calib.",   plotName = "im2", macroToRun = "CalibrateSpectrum2D()";
                   buttonLabel = "MNova",    plotName = "im1", macroToRun = "exportMNova2D(\"im1\")";
                   buttonLabel = "MNova",    plotName = "im2", macroToRun = "exportMNova2D(\"im1\")")

endproc(layout)
